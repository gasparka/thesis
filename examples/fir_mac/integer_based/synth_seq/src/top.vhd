-- generated by pyha 0.0.4 at 2017-04-18 15:37:48
library ieee;
    use ieee.std_logic_1164.all;
    use ieee.numeric_std.all;
    use ieee.fixed_pkg.all;
    use ieee.math_real.all;

library work;
    use work.PyhaUtil.all;
    use work.ComplexTypes.all;
    use work.all;

entity  top is
    port (
        clk, rst_n, enable: in std_logic;

        -- inputs
        x: in std_logic_vector(31 downto 0);
        sum_in: in std_logic_vector(31 downto 0);

        -- outputs
        y: out std_logic_vector(31 downto 0)
    );
end entity;

architecture arch of top is
begin
    process(clk, rst_n)
        variable self: MAC_seq_0.self_t;
        -- input variables
        variable var_in0: integer;
        variable var_in1: integer;

        --output variables
        variable var_out0: integer;
    begin
	             --convert slv to normal types
            var_in0 := to_integer(signed(x));
            var_in1 := to_integer(signed(sum_in));

            --call the main entry
            MAC_seq_0.\_pyha_init_self\(self);
            MAC_seq_0.main(self, var_in0, var_in1, ret_0=>var_out0);

            --convert normal types to slv
            y <= std_logic_vector(to_signed(var_out0, 32));
    if (not rst_n) then
        MAC_seq_0.\_pyha_reset_self\(self);
    elsif rising_edge(clk) then
        if enable then

            MAC_seq_0.\_pyha_update_self\(self);
        end if;
      end if;

    end process;
end architecture;